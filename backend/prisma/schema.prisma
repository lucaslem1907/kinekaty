// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  street    String?
  number    Int?
  city      String?
  isAdmin   Boolean  @default(false)
  bookings  Booking[] 
  tokens    TokenTransaction[]
  createdAt DateTime @default(now())
}

model Class {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  time        String
  duration    Int
  location    String
  capacity    Int
  bookings    Booking[] 
  createdAt   DateTime @default(now())
}

model Booking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   Int
  bookedAt  DateTime @default(now())

  @@unique([userId, classId]) // prevents double-booking by same user
}

model TokenTransaction {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  amount    Int      // positive = gekocht, negative = gebruikt
  type      String   // "purchase" of "use"
  createdAt DateTime @default(now())
}